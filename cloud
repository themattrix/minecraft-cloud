#!/bin/bash


#
# Bash settings
#

set -e
set -o pipefail


#
# Constants
#

readonly MY_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
readonly VM_NAME=minecraft
readonly GAME_VOLUMES="minecraft-fig/volumes/game"
readonly RUN_LOCAL_BACKUP_IN="minecraft-fig"
readonly RUN_LOCAL_BACKUP_ON=("volumes")
readonly SSH_OPTS=(
    -i "${HOME}/.docker/machine/machines/${VM_NAME}/id_rsa"
    -o IdentitiesOnly=yes
    -o StrictHostKeyChecking=no
    -o UserKnownHostsFile=/dev/null
    -o LogLevel=quiet
)


#
# VM interaction functions
#

function print_ip() {
    docker-machine ip "${VM_NAME}"
}

function print_ssh_user() {
    docker-machine inspect -f '{{.Driver.SSHUser}}' "${VM_NAME}"
}

function create_vm() {(
    local driver=${1-digitalocean}

    echo -en "\n>>> creating vm on ${driver}..."

    if docker-machine env "${VM_NAME}" &> /dev/null; then
        print_ip
        return
    fi

    source "${driver}.auth"
    source "${driver}.spec"
    echo
    docker-machine create \
        --driver "${driver}" \
        "${VM_NAME}"
)}

function enable_swap() {
    local size=$1

    echo -en "\n>>> enabling swapfile..."

    if ! while_sshed "which fallocate" &> /dev/null; then
        echo "skipping (no fallocate)"
        return
    fi

    local cmd=""
    cmd+='if [ $(swapon -s | wc -l) -eq 1 ]; then'
    cmd+=" echo"
    cmd+=" && fallocate -l ${size} /swapfile"
    cmd+=" && chmod 600 /swapfile"
    cmd+=" && mkswap /swapfile"
    cmd+=" && swapon /swapfile"
    cmd+=" && sysctl vm.swappiness=0"
    cmd+="; else"
    cmd+=" echo done"
    cmd+="; fi"

    while_sshed "sudo bash -c \"${cmd}\""
}

function make_ramdisk() {
    local path=$1
    local size=$2

    echo -en "\n>>> enabling ${size} ramdisk..."

    local cmd=""
    cmd+="if ! grep -sq '^tmpfs ${path}' /etc/fstab; then "
    cmd+="echo -e 'tmpfs ${path} tmpfs rw,size=${size} 0 0' >> /etc/fstab"
    cmd+=" && echo"
    cmd+=" && mkdir -p ${path}"
    cmd+=" && mount ${path}"
    cmd+="; else "
    cmd+="echo done"
    cmd+="; fi"
    cmd+=" && (mount | grep -F '${path}')"

    while_sshed "sudo bash -c \"${cmd}\""
}

function delete_vm() {
    echo -e "\n>>> deleting vm..."
    docker-machine rm "${VM_NAME}"
}

function while_connected() {(
    cd minecraft-fig
    docker-machine env "${VM_NAME}" > /dev/null
    eval "$(docker-machine env "${VM_NAME}")"
    "$@"
)}

function while_sshed() {
    local ip=$(print_ip)
    local user=$(print_ssh_user)
    ssh -l "${user}" "${SSH_OPTS[@]}" "${ip}" "$@"
}

function interactive_ssh() {
    while_sshed -t "$@"
}

function restore_data_to_vm() {
    local remote_dir="${PWD}/minecraft-fig"

    while_sshed "mkdir -p '${remote_dir}'"

    tar --exclude='*.lock' --exclude=".git" -C minecraft-fig -c volumes \
    | while_sshed "tar -C '${remote_dir}' --no-same-owner -x"
}

function backup_data_from_vm() {(
    local ip=$(print_ip)
    local remote_dir="${PWD}/${GAME_VOLUMES}"
    local d=

    function update_from_vm() {
        local subdir=$1
        while_sshed "tar --exclude='*.lock' -C '${remote_dir}' -c '${subdir}'" \
        | tar --no-same-owner -x
    }

    echo -e "\n>>> backing up data from vm..."

    cd "${GAME_VOLUMES}"

    # Completely replace existing world data
    for d in "world" "world_nether" "world_the_end"; do
        with_dir_moved "${d}" update_from_vm "${d}"
    done

    # Update custom settings
    update_from_vm "settings-custom"

    # Update spigot
    update_from_vm "spigot"
)}

function compose_build() {
    while_connected docker-compose build "${@}"
}

function compose_up() {
    while_connected docker-compose up "${@}"
}

function stop_services() {
    echo -e "\n>>> stopping services..."
    while_connected docker-compose stop game
    while_connected docker-compose kill
}

function container_id() {
    local name=$1
    while_connected docker-compose ps -q "${name}"
}

function mark2_attach() {
    # Launch this long-running connection over SSH instead of through docker.
    # Docker seems to have some kind of memory leak for this kind of thing
    # right now.
    while_sshed -t "docker exec -it $(container_id game) mark2 attach"
}

function mark2_stop() {
    while_connected docker exec "$(container_id game)" mark2 stop
}

function backup_local_data() {
    for backup_script in backup_world_*; do
        if [ -x "${backup_script}" ]; then
            echo -e "\n>>> backing up local data with '${backup_script}'..."
            "./${backup_script}" "${RUN_LOCAL_BACKUP_IN}" "${RUN_LOCAL_BACKUP_ON[@]}"
        fi
    done
}


#
# Generic Utilities
#

function with_dir_moved() {
    local dir=$1
    shift
    if [ -e "${dir}" ]; then mv "${dir}" "${dir}.bak"; fi
    "$@"
    if [ -e "${dir}.bak" ]; then rm -rf "${dir}.bak"; fi
}


#
# Entrypoint
#

function main() {
    cd "${MY_DIR}"

    if [ "$1" == "up" ]; then
        shift
        if [ "$1" == "--build-spigot" ]; then
            shift
            find "minecraft-fig" -type f -name "spigot.jar" -exec rm -v {} +
        fi
        create_vm "$@"
        enable_swap "4G"
        make_ramdisk "${PWD}/${GAME_VOLUMES}" "512M"
        restore_data_to_vm &
        compose_build
        wait
        compose_up -d
        echo -e "\n>>> up: $(print_ip)"
    elif [ "$1" == "rm" ]; then
        shift
        mark2_stop &> /dev/null || true
        if [ "$1" != "--no-preserve" ]; then
            stop_services
            backup_data_from_vm
        fi
        delete_vm
        if [ "$1" != "--no-preserve" ]; then
            backup_local_data
        fi
    elif [ "$1" == "admin" ]; then
        mark2_attach
    elif [ "$1" == "map" ]; then
        compose_up mapcrafter
    elif [ "$1" == "ssh" ]; then
        shift
        interactive_ssh "$@"
    elif [ "$1" == "compose" ]; then
        shift
        while_connected docker-compose "$@"
    elif [ "$1" == "docker" ]; then
        shift
        while_connected docker "$@"
    else
        echo "Usage...... $0 (up [--build-spigot] [driver]|map|admin|rm [--no-preserve])"
        echo "Advanced... $0 (ssh [args...]|compose [args...]|docker [args...])"
        exit 1
    fi
}

if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi
