#!/bin/bash

#
# Bash settings
#

set -e -o pipefail


#
# Constants
#

readonly MY_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
readonly VM_NAME="minecraft"
readonly ALL_VOLUMES="${MY_DIR}/minecraft-fig/volumes"
readonly GAME_VOLUMES="${ALL_VOLUMES}/game"
readonly DROPBOX_UPLOADER_CONFIG="${ALL_VOLUMES}/dropbox/.dropbox_uploader"
readonly RUN_LOCAL_BACKUP_IN="minecraft-fig"
readonly RUN_LOCAL_BACKUP_ON=("volumes")
readonly SSH_OPTS=(
    -i "${HOME}/.docker/machine/machines/${VM_NAME}/id_rsa"
    -o IdentitiesOnly=yes
    -o StrictHostKeyChecking=no
    -o UserKnownHostsFile=/dev/null
    -o LogLevel=quiet
)


#
# VM interaction functions
#

function print_ip {
    docker-machine ip "${VM_NAME}"
}

function print_ssh_user {
    docker-machine inspect -f '{{.Driver.SSHUser}}' "${VM_NAME}"
}

function create_vm {
    local driver=${1-digitalocean}

    echo -en "\n>>> creating vm on ${driver}..."

    if docker-machine env "${VM_NAME}" &> /dev/null; then
        print_ip
        return
    fi
    echo

    (
        source "${driver}.auth"
        source "${driver}.spec"

        docker-machine create \
            --driver "${driver}" \
            "${VM_NAME}"

        enable_swap "${SWAP_SIZE:-0}"
        make_ramdisk "${GAME_VOLUMES}" "${RAMDISK_SIZE:-512M}"
    )
}

function enable_swap {
    local size=$1

    if [ "${size}" == "0" ]; then
        echo -e "\n>>> not enabling swapfile"
        return
    fi

    echo -en "\n>>> enabling swapfile..."

    if ! while_sshed "which fallocate" &> /dev/null; then
        echo "skipping (no fallocate)"
        return
    fi

    local cmd=""
    cmd+='if [ $(swapon -s | wc -l) -eq 1 ]; then'
    cmd+=" echo"
    cmd+=" && fallocate -l ${size} /swapfile"
    cmd+=" && chmod 600 /swapfile"
    cmd+=" && mkswap /swapfile"
    cmd+=" && swapon /swapfile"
    cmd+=" && sysctl vm.swappiness=1"
    cmd+="; else"
    cmd+=" echo 'already enabled'"
    cmd+="; fi"

    while_sshed "sudo bash -c \"${cmd}\""
}

function make_ramdisk {
    local path=$1
    local size=$2

    if [ "${size}" == "0" ]; then
        echo -e "\n>>> not enabling ramdisk"
        return
    fi

    echo -en "\n>>> enabling ${size} ramdisk..."

    local cmd=""
    cmd+="if ! grep -sq '^tmpfs ${path}' /etc/fstab; then "
    cmd+="echo -e 'tmpfs ${path} tmpfs rw,size=${size} 0 0' >> /etc/fstab"
    cmd+=" && echo"
    cmd+=" && mkdir -p ${path}"
    cmd+=" && mount ${path}"
    cmd+="; else "
    cmd+="echo done"
    cmd+="; fi"
    cmd+=" && (mount | grep -F '${path}')"

    while_sshed "sudo bash -c \"${cmd}\""
}

function delete_vm {
    echo -e "\n>>> deleting vm..."
    docker-machine rm "${VM_NAME}"
}

function while_connected {(
    cd minecraft-fig
    docker-machine env "${VM_NAME}" > /dev/null
    eval "$(docker-machine env "${VM_NAME}")"
    "$@"
)}

function while_sshed {
    ssh -l "$(print_ssh_user)" "${SSH_OPTS[@]}" "$(print_ip)" "$@"
}

function interactive_ssh {
    while_sshed -t "$@"
}

function remote_data_missing {
    while_sshed "bash -c '[ ! -e \"${GAME_VOLUMES}/world/level.dat\" ]'"
}

function restore_data_to_vm {
    if [ "${1}" == "--overwrite=true" ] || remote_data_missing; then
        if use_dropbox; then
            load_dropbox_world_data
        else
            load_local_world_data
        fi
    fi
}

function backup_data_from_vm {
    echo -e "\n>>> backing up data from vm..."

    # Download the world data and settings locally in parallel with uploading
    # the same data to cloud providers (if the expected config files exist).
    if use_dropbox; then
        save_dropbox_world_data &
    fi
    save_local_world_data
    wait
}

function tar_volumes_to_stdout {
    tar -cz --exclude='*.lock' --exclude='.git' --exclude='.gitignore' -C "${ALL_VOLUMES}" "$@"
}

function untar_volumes_from_stdin {
    tar --no-same-owner -x --warning=no-timestamp -C "${ALL_VOLUMES}"
}

function load_local_world_data {
    while_sshed "mkdir -p '${ALL_VOLUMES}'"
    tar_volumes_to_stdout . | compose run --rm load_world_data_from_tar
}

function backup_items {
    local i
    for i in "${@}"; do
        if [ -e "${i}" ]; then
            mv -n "${i}" "${i}.bak"
        fi
    done
}

function delete_backups {
    local i
    for i in "${@}"; do
        rm -rf "${i}.bak"
    done
}

function save_local_world_data {
    local replace_items=(
        "${GAME_VOLUMES}/world"
        "${GAME_VOLUMES}/world_nether"
        "${GAME_VOLUMES}/world_the_end"
    )

    # Complete replace existing world data.
    backup_items "${replace_items[@]}"

    function save_world_data_to_tar {
        # TODO: This command should work but there seems to be a bug in compose:
        # TODO:   compose run --rm save_world_data_to_tar
        # TODO: Instead, we'll defer to docker directly (until the bug is fixed).
        while_connected docker run --rm -v "${ALL_VOLUMES}:/volumes:ro" \
            minecraftfig_save_world_data_to_tar
    }

    save_world_data_to_tar | untar_volumes_from_stdin

    # Remove old world data if downloads were successful.
    delete_backups "${replace_items[@]}"
}

function use_dropbox {
    [ -f "${DROPBOX_UPLOADER_CONFIG}" ]
}

function load_dropbox_world_data {
    while_sshed "mkdir -p '${ALL_VOLUMES}'"

    # Copy dropbox config (if present) and default settings to the VM.
    tar_volumes_to_stdout "dropbox" "game/settings-default" | compose run --rm load_world_data_from_tar

    # Copy the world data and custom settings from Dropbox.
    compose run --rm load_world_data_from_dropbox
}

function save_dropbox_world_data {
    compose run --rm save_world_data_to_dropbox
}

function compose {
    while_connected docker-compose "${@}"
}

function stop_services {
    echo -e "\n>>> stopping services..."
    compose stop
}

function container_id {
    local name=$1
    compose ps -q "${name}"
}

function mark2_attach {
    while_connected docker exec -it $(container_id game) mark2 attach
}

function mark2_stop {
    while_connected docker exec "$(container_id game)" mark2 stop
}

function archive_local_data {
    for backup_script in backup_world_*; do
        if [ -x "${backup_script}" ]; then
            echo -e "\n>>> archiving up local data with '${backup_script}'..."
            "./${backup_script}" "${RUN_LOCAL_BACKUP_IN}" "${RUN_LOCAL_BACKUP_ON[@]}"
        fi
    done
}

function up {
    create_vm "$@"

    compose build \
        load_world_data_from_tar \
        save_world_data_to_tar

    if use_dropbox; then
        compose pull \
            load_world_data_from_dropbox \
            save_world_data_to_dropbox
    fi

    # Load the world data in parallel with pulling the remaining images.
    restore_data_to_vm &
    compose pull game map mapcrafter
    echo -e "\n>>> waiting for world data upload to finish..."
    wait

    # Start Minecraft services.
    compose up -d game map mapcrafter

    # Done! Notify the user.
    echo -e "\n>>> up: $(print_ip)"
}


#
# Entrypoint
#

function main {
    cd "${MY_DIR}"

    if [ "$1" == "up" ]; then
        shift
        if [ "$1" == "--build-spigot" ]; then
            shift
            find "minecraft-fig" -type f -name "spigot.jar" -exec rm -v {} +
        fi
        up "$@"
    elif [ "$1" == "rm" ]; then
        shift
        mark2_stop &> /dev/null || :
        if [ "$1" != "--no-preserve" ]; then
            stop_services
            backup_data_from_vm
        fi
        delete_vm
        if [ "$1" != "--no-preserve" ]; then
            archive_local_data
        fi
    elif [ "$1" == "admin" ]; then
        mark2_attach
    elif [ "$1" == "map" ]; then
        compose up mapcrafter
    elif [ "$1" == "ssh" ]; then
        shift
        interactive_ssh "$@"
    elif [ "$1" == "compose" ]; then
        shift
        compose "$@"
    elif [ "$1" == "docker" ]; then
        shift
        while_connected docker "$@"
    else
        echo "Usage...... $0 (up [--build-spigot] [driver]|map|admin|rm [--no-preserve])"
        echo "Advanced... $0 (ssh [args...]|compose [args...]|docker [args...])"
        exit 1
    fi
}

[ "${BASH_SOURCE[0]}" != "${0}" ] || main "$@"
