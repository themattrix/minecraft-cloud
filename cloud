#!/bin/bash

set -e
set -o pipefail

readonly VM_NAME=minecraft
readonly SSH_OPTS=(
    -i "${HOME}/.docker/machine/machines/${VM_NAME}/id_rsa"
    -o IdentitiesOnly=yes
    -o StrictHostKeyChecking=no
    -o UserKnownHostsFile=/dev/null
    -o LogLevel=quiet
)

function create_vm() {(
    local driver=${1-digitalocean}

    echo -e "\n>>> creating vm on ${driver}..."

    source "${driver}.auth"
    source "${driver}.spec"

    docker-machine create \
        --driver "${driver}" \
        "${VM_NAME}"
)}

function delete_vm() {
    docker-machine rm "${VM_NAME}"
}

function while_connected() {(
    cd minecraft-fig
    $(docker-machine env "${VM_NAME}")
    "$@"
)}

function forward_ports() {
    local ip=$(docker-machine ip "${VM_NAME}")

    ssh "${SSH_OPTS[@]}" \
        -o ExitOnForwardFailure=yes \
        -L *:25565:localhost:25565 \
        -L *:25566:localhost:25566 \
        -N \
        -f \
        "root@${ip}"
}

function restore_data() {
    local ip=$(docker-machine ip "${VM_NAME}")
    local remote_dir="${PWD}/minecraft-fig"

    mkdir -p minecraft-fig/volumes/game/{settings,world}

    ssh "${SSH_OPTS[@]}" "root@${ip}" "mkdir -p '${remote_dir}'"

    tar -C minecraft-fig -c volumes \
    | ssh "${SSH_OPTS[@]}" "root@${ip}" "tar -C '${remote_dir}' --no-same-owner -x"
}

function backup_data() {(
    local ip=$(docker-machine ip "${VM_NAME}")
    local remote_dir="${PWD}/minecraft-fig"

    cd minecraft-fig
    mv volumes volumes.bak
    ssh "${SSH_OPTS[@]}" "root@${ip}" "tar -C '${remote_dir}' -c volumes" | tar --no-same-owner -x
    rm -rf volumes.bak
)}

function compose_up() {
    while_connected docker-compose up "${@}"
}

function compose_restart() {
    while_connected docker-compose restart "${@}"
}

if [ "$1" == "up" ]; then
    shift
    create_vm "$@"
    restore_data &
    compose_up -d map game
    wait
    echo -e "\n>>> ready"
elif [ "$1" == "restart" ]; then
    compose_restart "$@"
elif [ "$1" == "rm" ]; then
    echo -e "\n>>> stopping services..."
    while_connected docker-compose stop
    echo -e "\n>>> backing up data..."
    backup_data
    echo -e "\n>>> deleting vm..."
    delete_vm
elif [ "$1" == "forward" ]; then
    forward_ports
elif [ "$1" == "map" ]; then
    compose_up mapcrafter
elif [ "$1" == "compose" ]; then
    shift
    while_connected docker-compose "$@"
elif [ "$1" == "execute" ]; then
    shift
    while_connected "$@"
else
    echo "Usage: $0 (up [driver]|restart|rm|forward|map|compose [args...]|execute [args...])"
    exit 1
fi
