#!/bin/bash

set -e
set -o pipefail

readonly MY_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
readonly VM_NAME=minecraft
readonly RUN_LOCAL_BACKUP_IN="minecraft-fig"
readonly RUN_LOCAL_BACKUP_ON=("volumes")
readonly SSH_OPTS=(
    -i "${HOME}/.docker/machine/machines/${VM_NAME}/id_rsa"
    -o IdentitiesOnly=yes
    -o StrictHostKeyChecking=no
    -o UserKnownHostsFile=/dev/null
    -o LogLevel=quiet
)


function print_ip() {
    docker-machine ip "${VM_NAME}"
}

function create_vm() {(
    local driver=${1-digitalocean}

    echo -e "\n>>> creating vm on ${driver}..."

    source "${driver}.auth"
    source "${driver}.spec"

    docker-machine create \
        --driver "${driver}" \
        "${VM_NAME}"
)}

function delete_vm() {
    echo -e "\n>>> deleting vm..."
    docker-machine rm "${VM_NAME}"
}

function while_connected() {(
    cd minecraft-fig
    $(docker-machine env "${VM_NAME}")
    "$@"
)}

function restore_data_to_vm() {
    local ip=$(print_ip)
    local remote_dir="${PWD}/minecraft-fig"

    mkdir -p minecraft-fig/volumes/game/{settings,world}

    ssh "${SSH_OPTS[@]}" "root@${ip}" "mkdir -p '${remote_dir}'"

    tar -C minecraft-fig -c volumes \
    | ssh "${SSH_OPTS[@]}" "root@${ip}" "tar -C '${remote_dir}' --no-same-owner -x"
}

function backup_data_from_vm() {(
    local ip=$(print_ip)
    local remote_dir="${PWD}/minecraft-fig"

    echo -e "\n>>> backing up data from vm..."

    cd minecraft-fig
    mv volumes volumes.bak
    ssh "${SSH_OPTS[@]}" "root@${ip}" "tar -C '${remote_dir}' -c volumes" | tar --no-same-owner -x
    rm -rf volumes.bak
)}

function compose_up() {
    while_connected docker-compose up "${@}"
}

function stop_services() {
    echo -e "\n>>> stopping services..."
    while_connected docker-compose stop
}

function backup_local_data() {
    for backup_script in backup_world_*; do
        if [ -x "${backup_script}" ]; then
            echo -e "\n>>> backing up local data with '${backup_script}'..."
            "./${backup_script}" "${RUN_LOCAL_BACKUP_IN}" "${RUN_LOCAL_BACKUP_ON[@]}"
        fi
    done
}


cd "${MY_DIR}"

if [ "$1" == "up" ]; then
    shift
    create_vm "$@"
    restore_data_to_vm &
    compose_up -d map game
    wait
    echo -e "\n>>> up: $(print_ip)"
elif [ "$1" == "rm" ]; then
    stop_services
    backup_data_from_vm
    delete_vm
    backup_local_data
elif [ "$1" == "map" ]; then
    compose_up mapcrafter
elif [ "$1" == "compose" ]; then
    shift
    while_connected docker-compose "$@"
elif [ "$1" == "docker" ]; then
    shift
    while_connected docker "$@"
elif [ "$1" == "backup" ]; then
    backup_local_data
else
    echo "Usage: $0 (up [driver]|map|compose [args...]|docker [args...]|rm|backup)"
    exit 1
fi
